# Reports

A User is required to login and use RedSeed. Users may be trainees, coaches or administrators. A User provides details on user attributes and parameters that can be used within the RedSeed API.

## Pathway Attributes

Attribute | Type | Description
--------- | ------- | -----------
`id` | integer | A unique and autoincrementing identifier for the user which is generated by RedSeed automatically. | true
`firstName` | text | First name(s)
`lastName` | text | Last name(s)
`email` | text | Email address
`type` | 'HR', 'Manager', 'Trainee', 'System' | User type. Used to set user abilities & permissions
`status` | 'Active', 'Archived' | User status. Archived users cannot access RedSeed
`username` | string | Username
`code` | string | Employee code
`locale` | 'en_AU', 'en_NZ', 'en_US', 'es_ES', 'fr_FR', 'id_ID', 'ja_JP', 'pt_BR', 'th_TH' | User language in ISO/IEC 15897 format. See supported user locales below.
`marker` | boolean | Can the user be assigned marking?
`dateLastLogin` | datetime | The last time the user successfully logged in
`dateUserAdded` | datetime | When the user record was created
`dateArchivedAt` | datetime | The datetime the user was last archived
`dateActivityAt` | datetime | The last recorded activity of the user
`dateCreatedAt` | datetime | The datetime the user record was created at
`dateUpdatedAt` | datetime | The datetime the user record was last updated
`location` | location resource | The users location resource, including id, name and code. For more detail about RedSeed Locations see below.
`role` | role resource | The users role, including id and name. For more detail about RedSeed User Roles see below.
`identities` | array of user identity resources | User identity records assigned to the user. For more detail about RedSeed user identities see below.

## Get Location

## Update Location

## Delete Location

### Unarchive User




## Delete User

## Get Users

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
api.kittens.get
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
api.kittens.get()
```

```shell
curl "http://example.com/api/kittens" \
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
let kittens = api.kittens.get();
```

> The above command returns JSON structured like this:

```json
[
  {
    "id": 1,
    "name": "Fluffums",
    "breed": "calico",
    "fluffiness": 6,
    "cuteness": 7
  },
  {
    "id": 2,
    "name": "Max",
    "breed": "unknown",
    "fluffiness": 5,
    "cuteness": 10
  }
]
```

This endpoint retrieves all users.

### HTTP Request

`GET https://example.com/api/kittens`

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
include_cats | false | If set to true, the result will also include cats.
available | true | If set to false, the result will include kittens that have already been adopted.

<aside class="success">
Remember â€” a happy kitten is an authenticated kitten!
</aside>

## Get a Specific Kitten

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
api.kittens.get(2)
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
api.kittens.get(2)
```

```shell
curl "http://example.com/api/kittens/2" \
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
let max = api.kittens.get(2);
```

> The above command returns JSON structured like this:

```json
{
  "id": 2,
  "name": "Max",
  "breed": "unknown",
  "fluffiness": 5,
  "cuteness": 10
}
```

This endpoint retrieves a specific kitten.

<aside class="warning">Inside HTML code blocks like this one, you can't use Markdown, so use <code>&lt;code&gt;</code> blocks to denote code.</aside>

### HTTP Request

`GET http://example.com/kittens/<ID>`

### URL Parameters

Parameter | Description
--------- | -----------
ID | The ID of the kitten to retrieve

## Delete a Specific Kitten

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
api.kittens.delete(2)
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
api.kittens.delete(2)
```

```shell
curl "http://example.com/api/kittens/2" \
  -X DELETE \
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
let max = api.kittens.delete(2);
```

> The above command returns JSON structured like this:

```json
{
  "id": 2,
  "deleted" : ":("
}
```

This endpoint deletes a specific kitten.

### HTTP Request

`DELETE http://example.com/kittens/<ID>`

### URL Parameters

Parameter | Description
--------- | -----------
ID | The ID of the kitten to delete